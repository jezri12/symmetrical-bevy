use bevy::prelude::*;

#[derive(Component)]
pub struct Pig {
    pub lifetime: Timer,
}

fn spawn_pig(
    mut commands: Commands,
    asset_server: Res<AssetServer>,
    input: Res<Input<KeyCode>>,
    mut money: ResMut<Money>,
    player: Query<&Transform, With<Player>>,
){
    if !input.just_pressed(KeyCode::Space) {
	return;
    }

    let player_transform = player.single();

    if money.0 >= 10.0 {
	money.0 -= 10.0;
	info!("Spent 10 bucks on a pig, {:?} remaining", money.0);

	let texture = asset_server.load("pig.png");
	let pig_direction_x = rand::thread_rng().gen_range(1..=10) >= 5;
	let pig_direction_y = rand::thread_rng().gen_range(1..=10) >= 5;

	commands.spawn((
	    SpriteBundle {
		texture,
		transform: *player_transform,
		..default()
	    },
	    Pig {
		lifetime: Timer::from_seconds(6.0, TimerMode::Once),
	    },
	    IdleMovement {
		change_dir_x: Timer::from_seconds(2.0, TimerMode::Repeating),
		change_dir_y: Timer::from_seconds(3.0, TimerMode::Repeating),
		speed: Vec2::new(10.0, 2.0),
		right: pig_direction_x,
		down: pig_direction_y,
	    }
	));
    }
}

fn pig_lifetime(
    mut commands: Commands,
    time: Res<Time>,
    mut pigs: Query<(Entity, &mut Pig)>,
    mut money: ResMut<Money>,
){
    for (pig_entity, mut pig) in &mut pigs {
	
	pig.lifetime.tick(time.delta());
	
	if pig.lifetime.finished() {    
	    money.0 += 15.0;
	    commands.entity(pig_entity).despawn();

	    info!("Pig sold for 15 buckaneers! You've got ${:?}", money.0);
	}
    }
}
